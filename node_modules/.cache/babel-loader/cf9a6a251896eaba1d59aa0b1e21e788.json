{"ast":null,"code":"import React from 'react';\n\nconst useStickyroll = ({\n  factor = 1,\n  pages\n}) => {\n  const ref = React.useRef();\n  const [pageIndex, setPageIndex] = React.useState(0);\n  const [progress, setProgress] = React.useState(0);\n  const pageCount = typeof pages === \"number\" ? pages : Array.isArray(pages) && pages.length;\n  const handleScroll = React.useCallback(() => {\n    const {\n      current\n    } = ref;\n\n    if (current !== undefined) {\n      const end = window.innerHeight * -pageCount * factor;\n      const {\n        top\n      } = current.getBoundingClientRect();\n\n      if (top <= 0 && top >= end) {\n        const time = -top / window.innerHeight / factor;\n        const nextPageIndex = Math.floor(time);\n        const nextProgress = time - nextPageIndex;\n        setProgress(nextProgress);\n        setPageIndex(nextPageIndex);\n      } else if (top < end) {\n        setProgress(1);\n        setPageIndex(pageCount - 1);\n      } else if (top > 0) {\n        setProgress(0);\n        setPageIndex(0);\n      }\n    }\n  }, [ref, setPageIndex, setProgress, pageCount, factor]);\n  React.useEffect(() => {\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [handleScroll]);\n  const height = React.useMemo(() => `${pageCount * factor * 100 + 100}vh`, [pageCount, factor]);\n  const props = {\n    currentPage: pageIndex + 1,\n    pageCount,\n    pageIndex,\n    progress,\n    height\n  };\n  return [ref, props];\n};\n\nexport { useStickyroll };","map":{"version":3,"sources":["/Users/owner-mac/CODE/eleanor/eleanor/node_modules/@stickyroll/hooks/dist/esm/index.js"],"names":["React","useStickyroll","factor","pages","ref","useRef","pageIndex","setPageIndex","useState","progress","setProgress","pageCount","Array","isArray","length","handleScroll","useCallback","current","undefined","end","window","innerHeight","top","getBoundingClientRect","time","nextPageIndex","Math","floor","nextProgress","useEffect","addEventListener","removeEventListener","height","useMemo","props","currentPage"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,aAAa,GAAG,CAAC;AAAEC,EAAAA,MAAM,GAAG,CAAX;AAAcC,EAAAA;AAAd,CAAD,KAA2B;AAC7C,QAAMC,GAAG,GAAGJ,KAAK,CAACK,MAAN,EAAZ;AACA,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BP,KAAK,CAACQ,QAAN,CAAe,CAAf,CAAlC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BV,KAAK,CAACQ,QAAN,CAAe,CAAf,CAAhC;AACA,QAAMG,SAAS,GAAG,OAAOR,KAAP,KAAiB,QAAjB,GAA4BA,KAA5B,GAAoCS,KAAK,CAACC,OAAN,CAAcV,KAAd,KAAwBA,KAAK,CAACW,MAApF;AACA,QAAMC,YAAY,GAAGf,KAAK,CAACgB,WAAN,CAAkB,MAAM;AACzC,UAAM;AAAEC,MAAAA;AAAF,QAAcb,GAApB;;AACA,QAAIa,OAAO,KAAKC,SAAhB,EAA2B;AACvB,YAAMC,GAAG,GAAGC,MAAM,CAACC,WAAP,GAAqB,CAACV,SAAtB,GAAkCT,MAA9C;AACA,YAAM;AAAEoB,QAAAA;AAAF,UAAUL,OAAO,CAACM,qBAAR,EAAhB;;AACA,UAAID,GAAG,IAAI,CAAP,IAAYA,GAAG,IAAIH,GAAvB,EAA4B;AACxB,cAAMK,IAAI,GAAG,CAACF,GAAD,GAAOF,MAAM,CAACC,WAAd,GAA4BnB,MAAzC;AACA,cAAMuB,aAAa,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAtB;AACA,cAAMI,YAAY,GAAGJ,IAAI,GAAGC,aAA5B;AACAf,QAAAA,WAAW,CAACkB,YAAD,CAAX;AACArB,QAAAA,YAAY,CAACkB,aAAD,CAAZ;AACH,OAND,MAOK,IAAIH,GAAG,GAAGH,GAAV,EAAe;AAChBT,QAAAA,WAAW,CAAC,CAAD,CAAX;AACAH,QAAAA,YAAY,CAACI,SAAS,GAAG,CAAb,CAAZ;AACH,OAHI,MAIA,IAAIW,GAAG,GAAG,CAAV,EAAa;AACdZ,QAAAA,WAAW,CAAC,CAAD,CAAX;AACAH,QAAAA,YAAY,CAAC,CAAD,CAAZ;AACH;AACJ;AACJ,GArBoB,EAqBlB,CAACH,GAAD,EAAMG,YAAN,EAAoBG,WAApB,EAAiCC,SAAjC,EAA4CT,MAA5C,CArBkB,CAArB;AAsBAF,EAAAA,KAAK,CAAC6B,SAAN,CAAgB,MAAM;AAClBT,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCf,YAAlC;AACA,WAAO,MAAM;AACTK,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqChB,YAArC;AACH,KAFD;AAGH,GALD,EAKG,CAACA,YAAD,CALH;AAMA,QAAMiB,MAAM,GAAGhC,KAAK,CAACiC,OAAN,CAAc,MAAO,GAAEtB,SAAS,GAAGT,MAAZ,GAAqB,GAArB,GAA2B,GAAI,IAAtD,EAA2D,CACtES,SADsE,EAEtET,MAFsE,CAA3D,CAAf;AAIA,QAAMgC,KAAK,GAAG;AACVC,IAAAA,WAAW,EAAE7B,SAAS,GAAG,CADf;AAEVK,IAAAA,SAFU;AAGVL,IAAAA,SAHU;AAIVG,IAAAA,QAJU;AAKVuB,IAAAA;AALU,GAAd;AAOA,SAAO,CAAC5B,GAAD,EAAM8B,KAAN,CAAP;AACH,CA7CD;;AA+CA,SAASjC,aAAT","sourcesContent":["import React from 'react';\n\nconst useStickyroll = ({ factor = 1, pages }) => {\r\n    const ref = React.useRef();\r\n    const [pageIndex, setPageIndex] = React.useState(0);\r\n    const [progress, setProgress] = React.useState(0);\r\n    const pageCount = typeof pages === \"number\" ? pages : Array.isArray(pages) && pages.length;\r\n    const handleScroll = React.useCallback(() => {\r\n        const { current } = ref;\r\n        if (current !== undefined) {\r\n            const end = window.innerHeight * -pageCount * factor;\r\n            const { top } = current.getBoundingClientRect();\r\n            if (top <= 0 && top >= end) {\r\n                const time = -top / window.innerHeight / factor;\r\n                const nextPageIndex = Math.floor(time);\r\n                const nextProgress = time - nextPageIndex;\r\n                setProgress(nextProgress);\r\n                setPageIndex(nextPageIndex);\r\n            }\r\n            else if (top < end) {\r\n                setProgress(1);\r\n                setPageIndex(pageCount - 1);\r\n            }\r\n            else if (top > 0) {\r\n                setProgress(0);\r\n                setPageIndex(0);\r\n            }\r\n        }\r\n    }, [ref, setPageIndex, setProgress, pageCount, factor]);\r\n    React.useEffect(() => {\r\n        window.addEventListener(\"scroll\", handleScroll);\r\n        return () => {\r\n            window.removeEventListener(\"scroll\", handleScroll);\r\n        };\r\n    }, [handleScroll]);\r\n    const height = React.useMemo(() => `${pageCount * factor * 100 + 100}vh`, [\r\n        pageCount,\r\n        factor\r\n    ]);\r\n    const props = {\r\n        currentPage: pageIndex + 1,\r\n        pageCount,\r\n        pageIndex,\r\n        progress,\r\n        height\r\n    };\r\n    return [ref, props];\r\n};\n\nexport { useStickyroll };\n"]},"metadata":{},"sourceType":"module"}