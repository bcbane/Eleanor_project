{"ast":null,"code":"import { throttle } from '@stickyroll/utils';\nimport { PureComponent } from 'react';\n\nclass Tracker extends PureComponent {\n  constructor() {\n    super(...arguments);\n    /* istanbul ignore next */\n\n    /**\r\n     * Tracks the page scroll and calls the updateFunction\r\n     * @protected\r\n     * @return {void}\r\n     */\n\n    this.trackScroll = () => {\n      if (typeof this.props.onUpdate === \"function\") {\n        this.props.onUpdate(window.scrollY);\n      }\n    };\n  }\n  /**\r\n   * init.\r\n   * @public\r\n   */\n\n\n  componentDidMount() {\n    this.addHandlers();\n  }\n  /**\r\n   * Update all event handlers if the throttle property changed.\r\n   * @public\r\n   * @param {IEventTrackerProps} oldProps\r\n   * @return {void}\r\n   */\n\n\n  componentDidUpdate(oldProps) {\n    if (oldProps.throttle !== this.props.throttle) {\n      this.updateHandlers();\n    }\n  }\n  /**\r\n   * Cleanup.\r\n   * @public\r\n   */\n\n\n  componentWillUnmount() {\n    this.removeHandlers();\n  }\n  /**\r\n   * This component does not render anything.\r\n   * @public\r\n   */\n\n\n  render() {\n    return null;\n  }\n  /**\r\n   * Add event handlers.\r\n   * On resize and orientation change throttle is enforced at `250ms`.\r\n   */\n\n\n  addHandlers() {\n    const eventHandler = this.props.throttle ? throttle(this.trackScroll, this.props.throttle) : this.trackScroll;\n    const forceThrottle = throttle(this.trackScroll, 250);\n    this.scrollHandler = document.addEventListener(\"scroll\", eventHandler, {\n      passive: true\n    });\n    this.resizeHandler = window.addEventListener(\"resize\", forceThrottle, {\n      passive: true\n    });\n    this.orientationHandler = window.addEventListener(\"orientationchange\", forceThrottle, {\n      passive: true\n    });\n  }\n  /**\r\n   * Remove event handlers.\r\n   * @public\r\n   */\n\n\n  removeHandlers() {\n    document.removeEventListener(\"scroll\", this.scrollHandler);\n    window.removeEventListener(\"resize\", this.resizeHandler);\n    window.removeEventListener(\"resize\", this.orientationHandler);\n  }\n  /**\r\n   * Update event handlers. Safely removes and re-adds all event handlers.\r\n   * @public\r\n   */\n\n\n  updateHandlers() {\n    this.removeHandlers();\n    this.addHandlers();\n  }\n\n}\n\nexport { Tracker };","map":{"version":3,"sources":["/Users/owner-mac/CODE/eleanor/eleanor/node_modules/@stickyroll/tracker/dist/esm/index.js"],"names":["throttle","PureComponent","Tracker","constructor","arguments","trackScroll","props","onUpdate","window","scrollY","componentDidMount","addHandlers","componentDidUpdate","oldProps","updateHandlers","componentWillUnmount","removeHandlers","render","eventHandler","forceThrottle","scrollHandler","document","addEventListener","passive","resizeHandler","orientationHandler","removeEventListener"],"mappings":"AAAA,SAASA,QAAT,QAAyB,mBAAzB;AACA,SAASC,aAAT,QAA8B,OAA9B;;AAEA,MAAMC,OAAN,SAAsBD,aAAtB,CAAoC;AAChCE,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA;;AACA;;;;;;AAKA,SAAKC,WAAL,GAAmB,MAAM;AACrB,UAAI,OAAO,KAAKC,KAAL,CAAWC,QAAlB,KAA+B,UAAnC,EAA+C;AAC3C,aAAKD,KAAL,CAAWC,QAAX,CAAoBC,MAAM,CAACC,OAA3B;AACH;AACJ,KAJD;AAKH;AACD;;;;;;AAIAC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,WAAL;AACH;AACD;;;;;;;;AAMAC,EAAAA,kBAAkB,CAACC,QAAD,EAAW;AACzB,QAAIA,QAAQ,CAACb,QAAT,KAAsB,KAAKM,KAAL,CAAWN,QAArC,EAA+C;AAC3C,WAAKc,cAAL;AACH;AACJ;AACD;;;;;;AAIAC,EAAAA,oBAAoB,GAAG;AACnB,SAAKC,cAAL;AACH;AACD;;;;;;AAIAC,EAAAA,MAAM,GAAG;AACL,WAAO,IAAP;AACH;AACD;;;;;;AAIAN,EAAAA,WAAW,GAAG;AACV,UAAMO,YAAY,GAAG,KAAKZ,KAAL,CAAWN,QAAX,GACfA,QAAQ,CAAC,KAAKK,WAAN,EAAmB,KAAKC,KAAL,CAAWN,QAA9B,CADO,GAEf,KAAKK,WAFX;AAGA,UAAMc,aAAa,GAAGnB,QAAQ,CAAC,KAAKK,WAAN,EAAmB,GAAnB,CAA9B;AACA,SAAKe,aAAL,GAAqBC,QAAQ,CAACC,gBAAT,CAA0B,QAA1B,EAAoCJ,YAApC,EAAkD;AACnEK,MAAAA,OAAO,EAAE;AAD0D,KAAlD,CAArB;AAGA,SAAKC,aAAL,GAAqBhB,MAAM,CAACc,gBAAP,CAAwB,QAAxB,EAAkCH,aAAlC,EAAiD;AAClEI,MAAAA,OAAO,EAAE;AADyD,KAAjD,CAArB;AAGA,SAAKE,kBAAL,GAA0BjB,MAAM,CAACc,gBAAP,CAAwB,mBAAxB,EAA6CH,aAA7C,EAA4D;AAClFI,MAAAA,OAAO,EAAE;AADyE,KAA5D,CAA1B;AAGH;AACD;;;;;;AAIAP,EAAAA,cAAc,GAAG;AACbK,IAAAA,QAAQ,CAACK,mBAAT,CAA6B,QAA7B,EAAuC,KAAKN,aAA5C;AACAZ,IAAAA,MAAM,CAACkB,mBAAP,CAA2B,QAA3B,EAAqC,KAAKF,aAA1C;AACAhB,IAAAA,MAAM,CAACkB,mBAAP,CAA2B,QAA3B,EAAqC,KAAKD,kBAA1C;AACH;AACD;;;;;;AAIAX,EAAAA,cAAc,GAAG;AACb,SAAKE,cAAL;AACA,SAAKL,WAAL;AACH;;AAlF+B;;AAqFpC,SAAST,OAAT","sourcesContent":["import { throttle } from '@stickyroll/utils';\nimport { PureComponent } from 'react';\n\nclass Tracker extends PureComponent {\r\n    constructor() {\r\n        super(...arguments);\r\n        /* istanbul ignore next */\r\n        /**\r\n         * Tracks the page scroll and calls the updateFunction\r\n         * @protected\r\n         * @return {void}\r\n         */\r\n        this.trackScroll = () => {\r\n            if (typeof this.props.onUpdate === \"function\") {\r\n                this.props.onUpdate(window.scrollY);\r\n            }\r\n        };\r\n    }\r\n    /**\r\n     * init.\r\n     * @public\r\n     */\r\n    componentDidMount() {\r\n        this.addHandlers();\r\n    }\r\n    /**\r\n     * Update all event handlers if the throttle property changed.\r\n     * @public\r\n     * @param {IEventTrackerProps} oldProps\r\n     * @return {void}\r\n     */\r\n    componentDidUpdate(oldProps) {\r\n        if (oldProps.throttle !== this.props.throttle) {\r\n            this.updateHandlers();\r\n        }\r\n    }\r\n    /**\r\n     * Cleanup.\r\n     * @public\r\n     */\r\n    componentWillUnmount() {\r\n        this.removeHandlers();\r\n    }\r\n    /**\r\n     * This component does not render anything.\r\n     * @public\r\n     */\r\n    render() {\r\n        return null;\r\n    }\r\n    /**\r\n     * Add event handlers.\r\n     * On resize and orientation change throttle is enforced at `250ms`.\r\n     */\r\n    addHandlers() {\r\n        const eventHandler = this.props.throttle\r\n            ? throttle(this.trackScroll, this.props.throttle)\r\n            : this.trackScroll;\r\n        const forceThrottle = throttle(this.trackScroll, 250);\r\n        this.scrollHandler = document.addEventListener(\"scroll\", eventHandler, {\r\n            passive: true\r\n        });\r\n        this.resizeHandler = window.addEventListener(\"resize\", forceThrottle, {\r\n            passive: true\r\n        });\r\n        this.orientationHandler = window.addEventListener(\"orientationchange\", forceThrottle, {\r\n            passive: true\r\n        });\r\n    }\r\n    /**\r\n     * Remove event handlers.\r\n     * @public\r\n     */\r\n    removeHandlers() {\r\n        document.removeEventListener(\"scroll\", this.scrollHandler);\r\n        window.removeEventListener(\"resize\", this.resizeHandler);\r\n        window.removeEventListener(\"resize\", this.orientationHandler);\r\n    }\r\n    /**\r\n     * Update event handlers. Safely removes and re-adds all event handlers.\r\n     * @public\r\n     */\r\n    updateHandlers() {\r\n        this.removeHandlers();\r\n        this.addHandlers();\r\n    }\r\n}\n\nexport { Tracker };\n"]},"metadata":{},"sourceType":"module"}